// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.Francis.subsystems;


import org.usfirst.frc5505.Francis.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX talonSRX5;
    private WPI_TalonSRX talonSRX6;
    private DoubleSolenoid doubleSolenoid2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        talonSRX5 = new WPI_TalonSRX(10);
        
        
        
        talonSRX6 = new WPI_TalonSRX(11);
        
        
        
        doubleSolenoid2 = new DoubleSolenoid(0, 2, 3);
        addChild("Double Solenoid 2",doubleSolenoid2);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new intakeJoy());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void clamp() {
        System.out.println("Started Clamp Toggle");
        if (doubleSolenoid2.get() != Value.kForward) {
            doubleSolenoid2.set(Value.kForward);
            System.out.println("Clamped");
        } else {
            doubleSolenoid2.set(Value.kReverse);
            System.out.println("Unclamped");
        }
    }

    public void intakeJoystick(Joystick stick) {
        if(stick.getRawButton(1) && stick.getRawButton(2) == false) {
            if (stick.getRawAxis(2) > .01 && stick.getRawAxis(3) <= .01) {
                setIntake(-stick.getRawAxis(2));
                stick.setRumble(RumbleType.kRightRumble, 0);
                stick.setRumble(RumbleType.kLeftRumble, 0);
            } else if (stick.getRawAxis(3) > .01 && stick.getRawAxis(2) <= .01) {
                setIntake(stick.getRawAxis(3));
                stick.setRumble(RumbleType.kRightRumble, 0);
                stick.setRumble(RumbleType.kLeftRumble, 0);
            } else {
                setIntake(0);
                stick.setRumble(RumbleType.kRightRumble, 1);
                stick.setRumble(RumbleType.kLeftRumble, 1);
            }
        } else {
            stick.setRumble(RumbleType.kRightRumble, 0);
            stick.setRumble(RumbleType.kLeftRumble, 0);
        }
    }

    public void setIntake(double speed) {
        talonSRX5.set(speed);
        talonSRX6.set(-speed);
    }

}

